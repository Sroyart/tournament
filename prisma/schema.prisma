// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournaments {
  id           String           @id @default(uuid())
  name         String
  matches      Matches[]
  teams        Teams[] 
  date         DateTime
  type         String
  user         User @relation(fields: [userId], references: [id])
  userId       String
  isPublic     Boolean @default(false)
}

model Matches {
  id           Int           @id @default(autoincrement())
  tournament   Tournaments   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  // team1        Teams         @relation("team1", fields: [team1Id], references: [id])
  // team1Id      Int
  // team2        Teams         @relation("team2", fields: [team2Id], references: [id])
  // team2Id      Int
  // winner       Teams         @relation("winner", fields: [winnerId], references: [id])
  // winnerId     Int
  team1        String
  team2        String
  date         DateTime 
  winner       String?
}

 model Teams {
   id           Int           @id @default(autoincrement())
   owner        User          @relation(fields: [ownerId], references: [id])
   ownerId      String
   name         String
   tournament   Tournaments[]
 }

// model Players {
//   id           Int           @id @default(autoincrement())
//   name         String
//   team         Teams         @relation(fields: [teamId], references: [id])
//   teamId       Int
// }

model User {
  id            String          @id @default(cuid())
  firstName     String
  lastName      String
  email         String          @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tournaments   Tournaments[]
  teamsOwn         Teams[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}